package net.mrpaul.ads.xc240.ps10;

import TurtleGraphics.*;

public class TurtleGraphicsTest {
    public static void main(String[] args) {
        int[][] points = {{-175,-125},{0,175},{175,-125}};
        SperpinskiesTriangles(points, 100);
    }

    public static void SperpinskiesTriangles(int[][] points, int depth) {
        Pen myPen = new RainbowPen();

        myPen.up();
        myPen.move(points[0][0],points[0][1]);
        myPen.down();
        myPen.move(points[1][0],points[1][1]);
        myPen.move(points[2][0],points[2][1]);
        myPen.move(points[0][0],points[0][1]);

        int[][] array1= {points[0], getMid(points[0], points[1]), getMid(points[0], points[2])};
        SperpinskiesTriangles(array1, depth-1);
        int[][] array2= {points[1], getMid(points[0], points[1]), getMid(points[1], points[2])};
        SperpinskiesTriangles(array2, depth-1);
        int[][] array3= {points[2], getMid(points[2], points[1]), getMid(points[1], points[2])};
        SperpinskiesTriangles(array3, depth-1);
    }

    private static int[] getMid(int[] p1, int[] p2) {
        int[] returnPoints = new int[2];
        returnPoints[0] = (p1[0]+p2[0]) / 2;
        returnPoints[1] = (p1[1] + p2[1]) / 2;
        return returnPoints;
    }

    public static void FractalPatterns() {
        StandardPen p1 = new StandardPen();

        int[] gotos = {352,0,14,34,60,92,130,174,224,280,342,50,124,204,290,22,120,224,334,90,212,340,114,254,40,192,350,154,324,140,322,150,344,184,30,242,100,324,194,70,312,200,94,354,260,172,90,14,304,240,182,130,84,44,10,342,320,304,294,290,292,300,314,334,0,32,70,114,164,220,282,350,64,144,230,322,60,164,274,30,152,280,54,194,340,132,290,94,264,80,262,90,284,124,330,182,40,264,134,10,252,140,34,294,200,112,30,314,244,180,122,70,24,344,310,282,260,244,234,230,232,240,254,274,300,332,10,54,104,160,222,290,4,84,170,262,0,104,214,330,92,220,354,134,280,72,230,34,204,20,202,30,224,64,270,122,340,204,74,310,192,80,334,234,140,52,330,254,184,120,62,10,324,284,250,222,200,184,174,170,172,180,194,214,240,272,310,354,44,100,162,230,304,24,110,202,300,44,154,270,32,160,294,74,220,12,170,334,144,320,142,330,164,4,210,62,280,144,14,250,132,20,274,174,80,352,270,194,124,60,2,310,264,224,190,162,140,124,114,110,112,120,134,154,180,212,250,294,344,40,102,170,244,324,50,142,240,344,94,210,332,100,234,14,160,312,110,274,84,260,82,270,104,304,150,2,220,84,314,190,72,320,214,114,20,292,210,134,64,0,302,250,204,164,130,102,80,64,54,50,52,60,74,94,120,152,190,234,284,340,42,110,184,264,350,82,180,284,34,150,272,40,174,314,100,252,50,214,24,200,22,210,44,244,90,302,160,24,254,130,12,260,154,54,320,232,150,74,4,300,242,190,144,104,70,42,20,4,354,350};
        int[] froms = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359};

        p1.move(270);
        p1.turn(-90);
        p1.move(270);
        p1.turn(-90);
        p1.move(270);
        p1.turn(-90);
        p1.move(270);
        p1.turn(-90);

        for (int x = 0; x <= 359; x++) {
            p1.up();
            if (froms[x] <= 90) {
                p1.move(0, froms[x] % 90);
            } else if (90 < froms[x] && froms[x] < 180) {
                p1.move(froms[x] % 90, 270);
            }
            else if (180 < (froms[x]) && froms[x] <= 270) {
            p1.move(270, froms[x] % 90);
            }
            else if (270<(froms[x]) && froms[x]<360) {
                p1.move(froms[x] % 90, 0);
            }
            p1.down();
            if (gotos[x] <= 90) {
                p1.move(0, gotos[x] % 90);
            } else if (90 < gotos[x] && gotos[x] < 180) {
                p1.move(gotos[x] % 90, 270);
            }
            else if (180 < (gotos[x]) && gotos[x] <= 270) {
                p1.move(270, gotos[x] % 90);
            }
            else if (270<(gotos[x]) && gotos[x]<360) {
                p1.move(gotos[x] % 90, 0);
            }
        }
    }



}
